# simple_test.py - Teste simples da integra√ß√£o com API
import requests
import time

class SimpleBot:
    def __init__(self, api_url="http://localhost:8000"):
        self.api_url = api_url
        self.bot_id = None
        self.execution_id = None
    
    def test_api_connection(self):
        """Testa se API est√° funcionando"""
        try:
            response = requests.get(f"{self.api_url}/")
            if response.status_code == 200:
                print("‚úÖ API conectada com sucesso!")
                print(f"üì° Resposta: {response.json()}")
                return True
            else:
                print(f"‚ùå API retornou status: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao conectar com API: {e}")
            print("üê≥ Certifique-se que o Docker container est√° rodando!")
            return False
    
    def create_test_bot(self):
        """Cria um bot de teste"""
        try:
            bot_data = {
                "name": "Bot de Teste",
                "description": "Bot criado para testar integra√ß√£o"
            }
            
            response = requests.post(f"{self.api_url}/bots/", json=bot_data)
            if response.status_code == 200:
                result = response.json()
                self.bot_id = result['bot_id']
                print(f"‚úÖ Bot criado com ID: {self.bot_id}")
                return True
            else:
                print(f"‚ùå Erro ao criar bot: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao criar bot: {e}")
            return False
    
    def start_test_execution(self):
        """Inicia uma execu√ß√£o de teste"""
        try:
            response = requests.post(f"{self.api_url}/bots/{self.bot_id}/start")
            if response.status_code == 200:
                result = response.json()
                self.execution_id = result['execution_id']
                print(f"‚úÖ Execu√ß√£o iniciada com ID: {self.execution_id}")
                return True
            else:
                print(f"‚ùå Erro ao iniciar execu√ß√£o: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao iniciar execu√ß√£o: {e}")
            return False
    
    def simulate_work(self):
        """Simula trabalho do bot"""
        print("ü§ñ Simulando trabalho do bot...")
        for i in range(3):
            print(f"   üìã Processando item {i+1}/3...")
            time.sleep(1)
        print("‚úÖ Trabalho simulado conclu√≠do!")
    
    def stop_execution(self):
        """Para a execu√ß√£o"""
        try:
            response = requests.post(f"{self.api_url}/bots/{self.bot_id}/stop")
            if response.status_code == 200:
                print("‚úÖ Execu√ß√£o finalizada!")
                return True
            else:
                print(f"‚ùå Erro ao finalizar execu√ß√£o: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao finalizar execu√ß√£o: {e}")
            return False
    
    def get_stats(self):
        """Mostra estat√≠sticas do sistema"""
        try:
            response = requests.get(f"{self.api_url}/stats")
            if response.status_code == 200:
                stats = response.json()
                print("üìä Estat√≠sticas do Sistema:")
                print(f"   ü§ñ Total de bots: {stats['total_bots']}")
                print(f"   ‚ö° Total de execu√ß√µes: {stats['total_executions']}")
                print(f"   ‚úÖ Execu√ß√µes bem-sucedidas: {stats['successful_executions']}")
                print(f"   üìà Taxa de sucesso: {stats['success_rate']}")
                return True
            else:
                print(f"‚ùå Erro ao obter stats: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro ao obter stats: {e}")
            return False
    
    def run_full_test(self):
        """Executa teste completo"""
        print("üöÄ Iniciando teste completo da integra√ß√£o...")
        print("="*50)
        
        # 1. Testar conex√£o
        if not self.test_api_connection():
            return False
        
        # 2. Criar bot
        if not self.create_test_bot():
            return False
        
        # 3. Iniciar execu√ß√£o
        if not self.start_test_execution():
            return False
        
        # 4. Simular trabalho
        self.simulate_work()
        
        # 5. Finalizar execu√ß√£o
        if not self.stop_execution():
            return False
        
        # 6. Mostrar estat√≠sticas
        self.get_stats()
        
        print("="*50)
        print("üéâ TESTE COMPLETO FINALIZADO COM SUCESSO!")
        print("‚úÖ Sua integra√ß√£o bot + API est√° funcionando perfeitamente!")
        return True

if __name__ == "__main__":
    bot = SimpleBot()
    bot.run_full_test()