-- ===================================
-- BANCO BOT_AUTOMACAO - POSTGRESQL
-- Criação do banco do zero
-- ===================================

-- Primeiro, criar o banco (execute separadamente)
-- CREATE DATABASE bot_automacao;
-- \c bot_automacao;

-- ===========================
-- TABELA DE USUÁRIOS DO SISTEMA
-- ===========================
CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    senha_hash VARCHAR(255) NOT NULL,
    tipo_usuario VARCHAR(50) DEFAULT 'operador' CHECK(tipo_usuario IN ('admin', 'operador', 'viewer')),
    ativo BOOLEAN DEFAULT true,
    ultimo_login TIMESTAMP,
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    atualizado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===========================
-- TABELA DE BOTS
-- ===========================
CREATE TABLE bots (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(200) NOT NULL,
    descricao TEXT,
    script_path VARCHAR(500),
    linguagem VARCHAR(50) DEFAULT 'python',
    versao VARCHAR(20) DEFAULT '1.0.0',
    status VARCHAR(20) DEFAULT 'inativo' CHECK(status IN ('ativo', 'inativo', 'manutencao', 'erro')),
    categoria VARCHAR(50) DEFAULT 'automacao',
    usuario_id INTEGER NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    configuracao JSONB,
    cron_agendamento VARCHAR(100),
    timeout_segundos INTEGER DEFAULT 3600,
    max_tentativas INTEGER DEFAULT 3,
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    atualizado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===========================
-- TABELA DE EXECUÇÕES
-- ===========================
CREATE TABLE execucoes (
    id SERIAL PRIMARY KEY,
    bot_id INTEGER NOT NULL REFERENCES bots(id) ON DELETE CASCADE,
    status VARCHAR(20) DEFAULT 'pendente' CHECK(status IN ('pendente', 'executando', 'concluido', 'falhou', 'cancelado', 'timeout')),
    iniciado_em TIMESTAMP,
    finalizado_em TIMESTAMP,
    duracao_segundos INTEGER,
    log_execucao TEXT,
    resultado TEXT,
    erro_detalhes TEXT,
    itens_processados INTEGER DEFAULT 0,
    itens_sucesso INTEGER DEFAULT 0,
    itens_erro INTEGER DEFAULT 0,
    taxa_sucesso DECIMAL(5,2),
    memoria_usada_mb INTEGER,
    cpu_percentual DECIMAL(5,2),
    tentativa_atual INTEGER DEFAULT 1,
    executado_por INTEGER REFERENCES usuarios(id),
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===========================
-- TABELA DE LOGS DETALHADOS
-- ===========================
CREATE TABLE logs_sistema (
    id SERIAL PRIMARY KEY,
    execucao_id INTEGER REFERENCES execucoes(id) ON DELETE CASCADE,
    nivel VARCHAR(20) NOT NULL CHECK(nivel IN ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')),
    mensagem TEXT NOT NULL,
    modulo VARCHAR(100),
    funcao VARCHAR(100),
    linha INTEGER,
    timestamp_log TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    dados_extras JSONB
);

-- ===========================
-- TABELA DE AGENDAMENTOS
-- ===========================
CREATE TABLE agendamentos (
    id SERIAL PRIMARY KEY,
    bot_id INTEGER NOT NULL REFERENCES bots(id) ON DELETE CASCADE,
    nome_agendamento VARCHAR(200) NOT NULL,
    expressao_cron VARCHAR(100) NOT NULL,
    timezone VARCHAR(50) DEFAULT 'America/Sao_Paulo',
    ativo BOOLEAN DEFAULT true,
    proxima_execucao TIMESTAMP,
    ultima_execucao TIMESTAMP,
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===========================
-- TABELA DE RELATÓRIOS
-- ===========================
CREATE TABLE relatorios (
    id SERIAL PRIMARY KEY,
    titulo VARCHAR(300) NOT NULL,
    tipo VARCHAR(50) NOT NULL,
    execucao_id INTEGER REFERENCES execucoes(id),
    periodo_inicio TIMESTAMP,
    periodo_fim TIMESTAMP,
    conteudo_html TEXT,
    dados_json JSONB,
    arquivo_caminho VARCHAR(500),
    formato VARCHAR(20) DEFAULT 'html',
    status VARCHAR(20) DEFAULT 'gerado',
    criado_por INTEGER REFERENCES usuarios(id),
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===========================
-- TABELA DE NOTIFICAÇÕES
-- ===========================
CREATE TABLE notificacoes (
    id SERIAL PRIMARY KEY,
    usuario_id INTEGER REFERENCES usuarios(id),
    tipo VARCHAR(20) NOT NULL CHECK(tipo IN ('email', 'sistema', 'webhook')),
    titulo VARCHAR(200) NOT NULL,
    mensagem TEXT NOT NULL,
    dados JSONB,
    status VARCHAR(20) DEFAULT 'pendente' CHECK(status IN ('pendente', 'enviado', 'falhou', 'lido')),
    enviado_em TIMESTAMP,
    lido_em TIMESTAMP,
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===========================
-- TABELA DE CONFIGURAÇÕES
-- ===========================
CREATE TABLE configuracoes_sistema (
    id SERIAL PRIMARY KEY,
    chave VARCHAR(100) UNIQUE NOT NULL,
    valor VARCHAR(500) NOT NULL,
    descricao TEXT,
    tipo VARCHAR(20) DEFAULT 'string',
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    atualizado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===========================
-- TABELA DE SESSÕES
-- ===========================
CREATE TABLE sessoes_usuario (
    id SERIAL PRIMARY KEY,
    usuario_id INTEGER NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    token_sessao VARCHAR(500) UNIQUE NOT NULL,
    ip_address INET,
    user_agent VARCHAR(500),
    expira_em TIMESTAMP NOT NULL,
    criado_em TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ===========================
-- ÍNDICES PARA PERFORMANCE
-- ===========================
CREATE INDEX idx_bots_usuario ON bots(usuario_id);
CREATE INDEX idx_bots_status ON bots(status);
CREATE INDEX idx_execucoes_bot ON execucoes(bot_id);
CREATE INDEX idx_execucoes_status ON execucoes(status);
CREATE INDEX idx_execucoes_data ON execucoes(criado_em);
CREATE INDEX idx_logs_execucao ON logs_sistema(execucao_id);
CREATE INDEX idx_logs_nivel ON logs_sistema(nivel);
CREATE INDEX idx_agendamentos_proximo ON agendamentos(proxima_execucao);
CREATE INDEX idx_notificacoes_usuario ON notificacoes(usuario_id);
CREATE INDEX idx_sessoes_token ON sessoes_usuario(token_sessao);

-- ===========================
-- FUNÇÕES E TRIGGERS
-- ===========================

-- Função para atualizar timestamp
CREATE OR REPLACE FUNCTION atualizar_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.atualizado_em = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Função para calcular taxa de sucesso
CREATE OR REPLACE FUNCTION calcular_taxa_sucesso()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.itens_processados > 0 THEN
        NEW.taxa_sucesso = (NEW.itens_sucesso::DECIMAL / NEW.itens_processados) * 100;
    END IF;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Aplicar triggers
CREATE TRIGGER trigger_usuarios_timestamp 
    BEFORE UPDATE ON usuarios 
    FOR EACH ROW EXECUTE FUNCTION atualizar_timestamp();

CREATE TRIGGER trigger_bots_timestamp 
    BEFORE UPDATE ON bots 
    FOR EACH ROW EXECUTE FUNCTION atualizar_timestamp();

CREATE TRIGGER trigger_config_timestamp 
    BEFORE UPDATE ON configuracoes_sistema 
    FOR EACH ROW EXECUTE FUNCTION atualizar_timestamp();

CREATE TRIGGER trigger_taxa_sucesso 
    BEFORE INSERT OR UPDATE ON execucoes 
    FOR EACH ROW EXECUTE FUNCTION calcular_taxa_sucesso();

-- ===========================
-- DADOS INICIAIS
-- ===========================

-- Usuário administrador
INSERT INTO usuarios (nome, email, senha_hash, tipo_usuario) 
VALUES ('Administrador', 'admin@botautomacao.com', '$2a$10$exemplo.hash.senha', 'admin');

-- Configurações básicas
INSERT INTO configuracoes_sistema (chave, valor, descricao) VALUES
('versao_app', '1.0.0', 'Versão da aplicação'),
('modo_manutencao', 'false', 'Sistema em manutenção'),
('max_execucoes_simultaneas', '5', 'Máximo de bots executando simultaneamente'),
('retencao_logs_dias', '30', 'Dias para manter logs'),
('notificacoes_email_ativo', 'true', 'Notificações por email ativas');

-- Bot de exemplo
INSERT INTO bots (nome, descricao, usuario_id, status) 
VALUES ('Bot de Exemplo', 'Bot de demonstração do sistema', 1, 'inativo');

COMMIT;

-- Verificação
SELECT 'Banco bot_automacao criado com sucesso!' as status;
SELECT COUNT(*) as total_tabelas FROM information_schema.tables WHERE table_schema = 'public';